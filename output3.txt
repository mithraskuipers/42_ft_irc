// Command.hpp

#ifndef COMMAND_HPP
#define COMMAND_HPP

#include <iostream>
#include <vector>
#include <string>
#include "Client.hpp"
#include "Channel.hpp"
#include "Client.hpp"
#include "Channel.hpp"
#include <vector>
#include <string>

class Server; // Forward declaration of Server class

class Command
{
public:
	Command(std::vector<Client> &clients, Server &server);
	~Command();
	void addChannel(const std::string &channelName);
	void processRawClientData(const std::string &input, Client &client);
	bool leaveChannel(const std::string &channelName, Client &user);
	bool joinChannel(const std::string &channelName, Client &user);

private:
	std::vector<Client> &clients;
	std::vector<Channel> channels;
	Server &ircServer;
	void privatmsg(std::vector<std::string> cmds, Client &sender);

	void handlePartCommand(const std::vector<std::string> &command, Client &client);
	// void away(std::vector<std::string> const & cmds, Client & client);
	// void notice(std::vector<std::string> const & cmds, Client & client);
	void handlePingCommand(const std::vector<std::string> &command, Client &client);
	void handlePassCommand(const std::vector<std::string> &command, Client &client);
	void handleWhoisCommand(const std::vector<std::string> &command, Client &client);
	void handleNickCommand(const std::vector<std::string> &command, Client &client);
	void handleListCommand(const std::vector<std::string> &command, Client &client);
	void handleUserCommand(const std::vector<std::string> &command, Client &client);
	void handleQuitCommand(const std::vector<std::string> &command, Client &client);
	void handleJoinCommand(const std::vector<std::string> &command, Client &client);
	void handleLeaveCommand(const std::vector<std::string> &command, Client &client);
	void handleCreateCommand(const std::vector<std::string> &command, Client &client);
	void sendChannelList(Client &user);
};

#endif // COMMAND_HPP
#ifndef CHANNEL_HPP
#define CHANNEL_HPP

#include <vector>
#include <string>

class Client;

class Channel
{
public:
	Channel();
	~Channel();
	Channel(const std::string &name);
	void addUser(Client *user);
	void removeUser(Client *user);
	bool isEmpty() const;
	void listUsers() const;
	std::string getName() const;
	void setTopic(const std::string &topic, Client *user);
	std::string getTopic() const;
	std::string getTopicAuthor() const;
	bool isOperator(Client *user) const;
	void addOperator(Client *user);
	void removeOperator(Client *user);
	int getUsersCount() const;
	bool isUserInChannel(const Client *user) const;
	const std::vector<Client *> &getUsers() const { return users; }
	void broadcastMessage(const std::string &message, Client *sender);

private:
	std::vector<Client *> users;
	std::string channelName;
	std::string topic;
	std::string topicAuthor;
	std::vector<Client *> operators;
};

#endif // CHANNEL_HPP
#ifndef USER_HPP
#define USER_HPP

#include <string>

class Client
{
	private:
		int socket_descriptor;
		int port;
		std::string _nickname;
		std::string buff;
		bool registered;
		std::string ip;
		std::string _realname;

	public:
		void sendToClient(const std::string &data);

		Client(int socket_descriptor, const std::string &nick = "");
		int getSocketDescriptor() const;
		std::string &getBuff();
		void setNick(const std::string &newNick);
		void setRealName(const std::string &newRealName);
		std::string getRealName() const;
		void send(const std::string &data);
		std::string getIP() const;
		void setIP(const std::string &clientIP);
		int getPort() const;
		void setPort(int clientPort);
		std::string getNick() const;
		bool getRegisteredStatus() const;
		void setRegistered(bool value);
};

#endif // USER_HPP
/* ************************************************************************** */
/*                                                                            */
/*                                                        ::::::::            */
/*   splash.hpp                                         :+:    :+:            */
/*                                                     +:+                    */
/*   By: mkuipers <mkuipers@student.codam.nl>         +#+                     */
/*                                                   +#+                      */
/*   Created: 2023/09/01 17:56:46 by mkuipers      #+#    #+#                 */
/*   Updated: 2023/09/01 18:04:40 by mkuipers      ########   odam.nl         */
/*                                                                            */
/* ************************************************************************** */

#ifndef SPLASH_H
# define SPLASH_H

void splash();
void color_red();
void color_orange();
void color_green();
void color_reset();
void clear_screen();

#define SPLASH "\
⠀⠀⠀⠀⠀⠀⠀⢀⣀⡤⠴⠶⠶⠒⠲⠦⢤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n\
⠀⠀⠀⠀⢀⡠⠞⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠲⠤⣄⡀⠀⠀⠀⠀\n\
⠀⠀⣀⡴⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣤⡿⠀⠀⠀⠀\n\
⠀⢾⣅⡀⠀⠀⠀⠀⣀⠀⠀⠀⠀⠀⠀⢀⡦⠤⠄⠀⠀⢻⡀⠀⠀⠀⠀\n\
⠀⠈⢹⡏⠀⠀⠐⠋⠉⠁⠀⠻⢿⠟⠁⠀⠀⢤⠀⠀⠠⠤⢷⣤⣤⢤⡄\n\
⠀⠀⣼⡤⠤⠀⠀⠘⣆⡀⠀⣀⡼⠦⣄⣀⡤⠊⠀⠀⠀⠤⣼⠟⠀⠀⢹⡂\n\
⠀⠊⣿⡠⠆⠀⠀⠀⠈⠉⠉⠙⠤⠤⠋⠀⠀⠀⠀⠀⠀⡰⠋⠀⠀⠀⡼⠁\n\
⠀⢀⡾⣧⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠜⠁⠀⠀⠀⣸⠁⠀\n\
⠀⠀⠀⡼⠙⠢⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⠃⠀⠀\n\
⠀⢀⡞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⠃⠀⠀⠀\n\
⠀⡼⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀\n\
⣾⠁⠀⢀⣠⡴⠆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀\n\
⠈⠛⠻⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀\n\
"

#endif/* ************************************************************************** */
/*                                                                            */
/*                                                        ::::::::            */
/*   includes.hpp                                       :+:    :+:            */
/*                                                     +:+                    */
/*   By: mikuiper <mikuiper@student.codam.nl>         +#+                     */
/*                                                   +#+                      */
/*   Created: 2023/07/08 14:12:24 by mikuiper      #+#    #+#                 */
/*   Updated: 2023/10/22 19:52:33 by mikuiper      ########   odam.nl         */
/*                                                                            */
/* ************************************************************************** */

#ifndef INCLUDES_HPP

#include <iostream>
#include <cstdlib> // atoi
#include "Server.hpp"
#include <cstdio> // printf
#include "splash.hpp"
#include <unistd.h>
#include <algorithm>
#include "Client.hpp"
#include "Command.hpp"
#include "Channel.hpp"
#include <cstring> // string.h
#include <algorithm>
#include <unistd.h>
#include <cstring>
#include <iostream>
#include <stdexcept>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <fcntl.h>
#include <sys/types.h>
#include <netdb.h>
#include "./../incs/Server.hpp"
#include <cstdlib>
#include <ctime>
#include "./../incs/splash.hpp"

#define QUEUE_SIZE 10
#define TRUE 1
#define FALSE 0
#define MAX_CLIENTS 10
#define ESC_KEY 27
#define BUFF_LIMIT 1024

#define SERVER_NAME "chat.debugdivas.nl"

#endif